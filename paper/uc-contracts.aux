\relax 
\citation{kiayias2016fair}
\citation{uc}
\citation{guc}
\citation{kiayias2016fair}
\providecommand\tcolorbox@label[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Related Works}{1}}
\citation{badertscher2017bitcoin}
\citation{canetti2016universally}
\citation{uc-pki}
\citation{badertscher2017bitcoin}
\citation{uc}
\citation{katz-clock}
\@writefile{toc}{\contentsline {paragraph}{Differentiating $\ensuremath  {\mathcal  {G}}_\ensuremath  {{\mathsf  {cert}}}^\ensuremath  {{\mathsf  {pid}}}$ and $\ensuremath  {\mathcal  {G}}_\ensuremath  {{\mathsf  {swk}}}^\ensuremath  {{\mathsf  {pid}}}$.}{3}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Preliminaries}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Synchronous Network}{3}}
\newlabel{fig:functionality:exectx}{{2.1}{3}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Three-Phase Commitment}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Synchronous Bracha Broadcast}{3}}
\bibstyle{plain}
\bibdata{bibuccontracts}
\bibcite{badertscher2017bitcoin}{1}
\bibcite{canetti2016universally}{2}
\bibcite{uc-pki}{3}
\bibcite{kiayias2016fair}{4}
\newlabel{fig:functionality:execcreate}{{2.1}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Extra}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Ideal functionality representing a basic ledger with adversarial methods for delaying/reordering transactions and smart contract support}}{5}}
\newlabel{fig:functionality:ledger}{{1}{5}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Protection wrapper for the ledger to maintain indistinguishability.}}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Update function for a payment channel. Given as a parameter to \ensuremath  {\ensuremath  {\mathcal  {F}}_{\ensuremath  {{\mathsf  {state}}}}}. It defines the format of the \ensuremath  {{\mathsf  {state}}} and its updates.}}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Contract pay}}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Local protocol for parties to follow for a payment channel between two parties. Parties can pay, deposit into, or withdraw from the channel.}}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces The ideal functionality \ensuremath  {\ensuremath  {\mathcal  {F}}_{\ensuremath  {{\mathsf  {state}}}}}. The functionality proceeds in rounds and waits for parties to provide input. When all parties have provided input or the round deadline has passed, a state update is executed. Contract output is given to \ensuremath  {\ensuremath  {\mathcal  {G}}_{\ensuremath  {{\mathsf  {ledger}}}}}in the form of a transaction. Parties must explicitly \ensuremath  {{\mathsf  {ping}}} the functionality in order to make progress. }}{8}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces The payment channel functionality. Unlike $\ensuremath  {\ensuremath  {\mathcal  {F}}_{\ensuremath  {{\mathsf  {state}}}}}$, doesn't need any notion of rounds until it must deal with on-chain transactions for deposits. Buffering for $O(\Delta )$ rounds implies the adversary can choose the number.}}{9}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces The wrapper $\mathcal  {W}$ that provides common function for all functionalities. In $\ensuremath  {\ensuremath  {\mathcal  {F}}_{\ensuremath  {{\mathsf  {state}}}}}$ for example, the wrapper enables functionalities to buffer sending output to the parties in the protocol. When the wrapper sends a message to its functionality $\ensuremath  {\mathcal  {F}}$, it does not constitute an \ensuremath  {{\mathsf  {ITM}}} to \ensuremath  {{\mathsf  {ITM}}} write as they are both running on the same \ensuremath  {{\mathsf  {ITM}}}.}}{9}}
